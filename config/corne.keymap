/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

// #include <dt-bindings/zmk/backlight.h>


/*
 * Temporarily here because nice nano v2 spi is not defined on ZMk Yet
 * Source: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/reviung41/boards/nice_nano.overlay
 * GitHub Issue: https://github.com/zmkfirmware/zmk/issues/885
 */

#include <dt-bindings/led/led.h>

&spi1 {
  compatible = "nordic,nrf-spim";
  status = "okay";
  mosi-pin = <6>;
  // Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
  sck-pin = <5>;
  miso-pin = <7>;

  led_strip: ws2812@0 {
    compatible = "worldsemi,ws2812-spi";
    label = "WS2812";

    /* SPI */
    reg = <0>; /* ignored, but necessary for SPI bindings */
    spi-max-frequency = <4000000>;

    /* WS2812 */
    chain-length = <10>; /* number of LEDs */
    spi-one-frame = <0x70>;
    spi-zero-frame = <0x40>;
    color-mapping = <LED_COLOR_ID_GREEN
                          LED_COLOR_ID_RED
                          LED_COLOR_ID_BLUE>;
  };
};



/ {
        chosen {
                zmk,underglow = &led_strip;
        };
};
/*
 * Temporarily here because nice nano v2 spi is not defined on ZMk YET
 */


&caps_word {
  continue-list = <UNDERSCORE MINUS>;
};

// MACROS
#define U_UNDO  LG(Z)
#define U_CUT   LG(X)
#define U_COPY  LG(C)
#define U_PSTE  LG(V)
#define U_REDO  LS(LG(Z))
#define U_CLIP  LC(LG(C))
#define U_SHOT  LS(LG(N4))

// CONFIGURATION
#define COMBO(NAME, KEYPOS) \
  combo_##NAME { \
      timeout-ms = <40>; \
      key-positions = <KEYPOS>; \
      bindings = <&kp NAME>; \
  };

/ {

        combos {
          compatible = "zmk,combos";

          // Left-hand combos
          COMBO(AT_SIGN, 1 2)
          COMBO(LEFT_BRACE, 2 3)
          COMBO(EXCLAMATION, 1 11)
          COMBO(HASH, 2 12)
          COMBO(DOLLAR, 3 13)
          COMBO(TILDE, 10 11)
          COMBO(COLON, 11 12)
          COMBO(LEFT_PARENTHESIS, 12 13)
          COMBO(PERCENT, 11 21)
          COMBO(CARET, 12 22)
          COMBO(AMPERSAND, 13 23)
          COMBO(GRAVE, 20 21)
          COMBO(SEMICOLON, 21 22)
          COMBO(LEFT_BRACKET, 22 23)

          // Right-hand combos
          COMBO(RIGHT_BRACE, 6 7)
          COMBO(DOUBLE_QUOTES, 7 8)
          COMBO(EQUAL, 6 16)
          COMBO(PIPE, 7 17)
          COMBO(BACKSLASH, 8 18)
          COMBO(RIGHT_PARENTHESIS, 16 17)
          COMBO(MINUS, 17 18)
          COMBO(PLUS, 18 19)
          COMBO(ASTERISK, 16 26)
          COMBO(LESS_THAN, 17 27)
          COMBO(GREATER_THAN, 18 28)
          COMBO(RIGHT_BRACKET, 26 27)
          COMBO(UNDERSCORE, 27 28)
          COMBO(QUESTION, 28 29)
        };

        keymap {
                compatible = "zmk,keymap";

                base_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  BKSP   |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '      |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |  SHIFT  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHIFT
                  &kp LGUI &mo 1   &kp RET   &kp SPACE &mo 2 &kp RALT
                        >;
                };

                colmak_layer {
// -----------------------------------------------------------------------------------------
// |  MIN |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  '  | PLUS |
// | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  ;   |
// |  (   |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  |  )   |
//                    | TAB | BSP | DEL |   | ESC | SPC  | ENT |
                        bindings = <
   &kp MINUS &kp Q      &kp W      &kp F       &kp P        &kp B      &kp J   &kp L            &kp U       &kp Y       &kp SQT    &kp PLUS
   &kp LCTRL &mt LGUI A &mt LALT R &mt LCTRL S &mt LSHIFT T &kp G      &kp M   &mt RSHIFT N     &mt RCTRL E &mt RALT I  &mt RGUI O &kp SEMI
   &kp LPAR  &kp Z      &kp X      &kp C       &kp D        &kp V      &kp K   &kp H            &kp COMMA   &kp DOT     &kp FSLH   &kp RPAR
                                   &kp TAB     &kp BSPC     &kp DEL    &kp ESC &mt RSHIFT SPACE &kp RET
                        >;
                };

                num_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |  /  |  7  |  8  |  9  |  -  |      |
// | CTRL |     |     |     |     |     |   |  *  |  4  |  5  |  6  |  +  |      |
// | SHFT |     |     |     |     |     |   |  0  |  1  |  2  |  3  | ENT |      |
//                    | GUI |LALT | SPC |   | BSP |?????|  .  |

                        bindings = <
   &kp TAB    &none     &none      &none     &none  &none        &kp FSLH          &kp N7   &kp N8     &kp N9  &kp KP_MINUS  &none
   &kp LCTRL  &none     &none      &none     &none  &none        &kp KP_ASTERISK   &kp N4   &kp N5     &kp N6  &kp KP_PLUS   &none
   &kp LSHFT  &none     &none      &none     &none  &none        &kp N0            &kp N1   &kp N2     &kp N3  &kp RET       &none
                        &kp LGUI   &kp LALT     &kp SPACE        &kp BSPC          &none    &kp KP_DOT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };

                system_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                        &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };        };
};